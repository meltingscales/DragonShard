import React, { useState, useEffect } from 'react';
import { ApiService } from '../services/api';
import type { Vulnerability } from '../types/api';

const VulnerabilityMap: React.FC = () => {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    loadVulnerabilities();
    const interval = setInterval(loadVulnerabilities, 15000); // Refresh every 15 seconds
    return () => clearInterval(interval);
  }, []);

  const loadVulnerabilities = async () => {
    try {
      setError(null);
      const vulns = await ApiService.getVulnerabilities();
      setVulnerabilities(vulns);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to load vulnerabilities');
    } finally {
      setLoading(false);
    }
  };

  const getLevelColor = (level: string) => {
    switch (level) {
      case 'critical':
        return 'bg-red-500 text-white';
      case 'high':
        return 'bg-orange-500 text-white';
      case 'medium':
        return 'bg-yellow-500 text-black';
      case 'low':
        return 'bg-green-500 text-white';
      default:
        return 'bg-gray-500 text-white';
    }
  };

  const getLevelIcon = (level: string) => {
    switch (level) {
      case 'critical':
        return '🔥';
      case 'high':
        return '⚠️';
      case 'medium':
        return '⚡';
      case 'low':
        return 'ℹ️';
      default:
        return '❓';
    }
  };

  if (loading) {
    return (
      <div className="bg-dragon-card border border-dragon-border rounded-lg p-6">
        <h3 className="text-dragon-primary font-semibold mb-4">🛡️ Vulnerability Map</h3>
        <div className="text-center text-gray-400">Loading...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="bg-dragon-card border border-dragon-border rounded-lg p-6">
        <h3 className="text-dragon-primary font-semibold mb-4">🛡️ Vulnerability Map</h3>
        <div className="text-red-400">{error}</div>
      </div>
    );
  }

  return (
    <div className="bg-dragon-card border border-dragon-border rounded-lg p-6">
      <h3 className="text-dragon-primary font-semibold mb-4">🛡️ Vulnerability Map</h3>
      
      {vulnerabilities.length === 0 ? (
        <div className="text-center text-gray-400 py-8">
          No vulnerabilities found
        </div>
      ) : (
        <div className="space-y-3 max-h-96 overflow-y-auto">
          {vulnerabilities.map((vuln) => (
            <div key={vuln.id} className="bg-dragon-dark border border-dragon-border rounded-lg p-4">
              <div className="flex items-start justify-between mb-2">
                <div className="flex items-center">
                  <span className="mr-2">{getLevelIcon(vuln.level)}</span>
                  <h4 className="font-semibold text-white">{vuln.name}</h4>
                </div>
                <span className={`px-2 py-1 rounded text-xs font-semibold ${getLevelColor(vuln.level)}`}>
                  {vuln.level.toUpperCase()}
                </span>
              </div>
              
              <p className="text-gray-400 text-sm mb-2">{vuln.description}</p>
              
              <div className="flex items-center justify-between text-xs text-gray-500">
                <span>Target: {vuln.target}</span>
                {vuln.cve_id && (
                  <span className="bg-gray-700 px-2 py-1 rounded">
                    {vuln.cve_id}
                  </span>
                )}
              </div>
              
              {vuln.service && (
                <div className="mt-2 text-xs text-gray-500">
                  Service: {vuln.service}
                  {vuln.port && `:${vuln.port}`}
                </div>
              )}
              
              <div className="mt-2 text-xs text-gray-500">
                Discovered: {new Date(vuln.discovered_at).toLocaleString()}
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default VulnerabilityMap; 