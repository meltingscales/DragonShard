name: Fast CI (PR Checks)

on:
  pull_request:
    branches: [ main, develop ]

jobs:
  # Fast checks for PRs
  fast-checks:
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Fail fast if something is wrong

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-fast-pip-${{ hashFiles('**/requirements.lock.txt') }}
        restore-keys: |
          ${{ runner.os }}-fast-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.lock.txt
        pip install pytest-cov ruff

    - name: Run linting (fast)
      run: |
        ruff check dragonshard/ --select E,W,F

    - name: Run critical unit tests (fast)
      run: |
        pytest dragonshard/tests/test_crawlers.py dragonshard/tests/test_fuzzing.py dragonshard/tests/test_genetic_mutator.py --cov=dragonshard --cov-report=term-missing -v --tb=short

    - name: Run security checks (fast)
      run: |
        pip install bandit
        bandit -r dragonshard/ -f txt -ll || true

  # Full tests only on main branch
  full-tests:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: fast-checks
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.lock.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.lock.txt
        pip install pytest-cov codecov

    - name: Install Playwright browsers
      run: |
        playwright install chromium

    - name: Run all tests
      run: |
        pytest dragonshard/tests/ --cov=dragonshard --cov-report=xml --cov-report=term-missing --junitxml=test-results.xml -v

    - name: Run linting
      run: |
        ruff check dragonshard/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results to Codecov
      if: ${{ !cancelled() }}
      uses: codecov/test-results-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: test-results.xml 