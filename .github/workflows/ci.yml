name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.lock.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.lock.txt
        pip install pytest-cov codecov

    - name: Install Playwright browsers
      run: |
        playwright install chromium

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y nmap python3-tk

    - name: Start test environment
      run: |
        # Start vulnerable containers for integration tests
        docker-compose -f docker-compose.test.yml up -d
        # Wait for containers to be ready
        sleep 30
        # Check if containers are running
        docker-compose -f docker-compose.test.yml ps

    - name: Verify containers are ready
      run: |
        # Wait for containers to be fully ready
        echo "Waiting for containers to be ready..."
        for i in {1..10}; do
          if curl -f http://localhost:8082 > /dev/null 2>&1; then
            echo "✓ Container on port 8082 is ready"
            break
          fi
          echo "Waiting for container on port 8082... (attempt $i/10)"
          sleep 10
        done
        
        # Check other containers
        for port in 8080 3000 8081 8083 8084; do
          if curl -f http://localhost:$port > /dev/null 2>&1; then
            echo "✓ Container on port $port is ready"
          else
            echo "⚠ Container on port $port not ready (may be optional)"
          fi
        done

    - name: Run unit tests (no containers required)
      run: |
        pytest dragonshard/tests/test_crawlers.py dragonshard/tests/test_fuzzing.py dragonshard/tests/test_genetic_mutator.py dragonshard/tests/test_response_analyzer.py dragonshard/tests/test_scanner.py --cov=dragonshard --cov-report=xml --cov-report=term-missing --junitxml=test-results.xml -v

    - name: Run integration tests (with containers)
      run: |
        # Run integration tests that require containers
        pytest dragonshard/tests/test_genetic_fuzzer_integration.py dragonshard/tests/test_genetic_fuzzer.py --cov=dragonshard --cov-report=xml --cov-report=term-missing --junitxml=test-results.xml -v

    - name: Run visualization tests (with containers)
      run: |
        # Run visualization tests that check container availability
        pytest dragonshard/tests/test_genetic_visualization.py --cov=dragonshard --cov-report=xml --cov-report=term-missing --junitxml=test-results.xml -v

    - name: Run Docker scanner tests
      run: |
        # Check if Docker is available and run scanner tests
        if command -v docker &> /dev/null; then
          pytest dragonshard/tests/test_docker_scanner.py --cov=dragonshard --cov-report=xml --cov-report=term-missing --junitxml=test-results.xml -v
        else
          echo "Docker not available, skipping Docker scanner tests"
        fi

    - name: Run linting
      run: |
        ruff check dragonshard/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results to Codecov
      if: ${{ !cancelled() }}
      uses: codecov/test-results-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: test-results.xml

    - name: Clean up test environment
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down -v
        docker system prune -f

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: "3.12"

    - name: Install security tools
      run: |
        pip install bandit safety

    - name: Run security checks
      run: |
        bandit -r dragonshard/ -f json -o bandit-report.json || true
        safety check

  docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t dragonshard:latest .

    - name: Test Docker image
      run: |
        docker run --rm dragonshard:latest python -c "import dragonshard; print('Docker image test passed')" 