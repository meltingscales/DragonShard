#!/usr/bin/env python3
"""
Test script for DragonShard Visualization API
"""

import asyncio
import httpx
import json
import logging
from datetime import datetime

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# API configuration
API_BASE = "http://localhost:8000/api/v1"

async def test_api_endpoints():
    """Test all API endpoints"""
    async with httpx.AsyncClient() as client:
        logger.info("üß™ Testing DragonShard Visualization API")
        logger.info("=" * 50)
        
        # Test attacks endpoint
        logger.info("üìä Testing attacks endpoint...")
        try:
            response = await client.get(f"{API_BASE}/attacks/")
            if response.status_code == 200:
                attacks = response.json()
                logger.info(f"‚úÖ Attacks endpoint: {len(attacks)} attacks found")
            else:
                logger.error(f"‚ùå Attacks endpoint failed: {response.status_code}")
        except Exception as e:
            logger.error(f"‚ùå Attacks endpoint error: {e}")
        
        # Test attack summary
        try:
            response = await client.get(f"{API_BASE}/attacks/summary/stats")
            if response.status_code == 200:
                stats = response.json()
                logger.info(f"‚úÖ Attack summary: {stats['total_attacks']} total attacks")
            else:
                logger.error(f"‚ùå Attack summary failed: {response.status_code}")
        except Exception as e:
            logger.error(f"‚ùå Attack summary error: {e}")
        
        # Test vulnerabilities endpoint
        logger.info("üõ°Ô∏è Testing vulnerabilities endpoint...")
        try:
            response = await client.get(f"{API_BASE}/vulnerabilities/")
            if response.status_code == 200:
                vulns = response.json()
                logger.info(f"‚úÖ Vulnerabilities endpoint: {len(vulns)} vulnerabilities found")
            else:
                logger.error(f"‚ùå Vulnerabilities endpoint failed: {response.status_code}")
        except Exception as e:
            logger.error(f"‚ùå Vulnerabilities endpoint error: {e}")
        
        # Test vulnerability summary
        try:
            response = await client.get(f"{API_BASE}/vulnerabilities/summary")
            if response.status_code == 200:
                stats = response.json()
                logger.info(f"‚úÖ Vulnerability summary: {stats['total_vulnerabilities']} total vulnerabilities")
            else:
                logger.error(f"‚ùå Vulnerability summary failed: {response.status_code}")
        except Exception as e:
            logger.error(f"‚ùå Vulnerability summary error: {e}")
        
        # Test network endpoint
        logger.info("üåê Testing network endpoint...")
        try:
            response = await client.get(f"{API_BASE}/network/topology")
            if response.status_code == 200:
                topology = response.json()
                logger.info(f"‚úÖ Network topology: {topology['total_hosts']} hosts, {topology['total_services']} services")
            else:
                logger.error(f"‚ùå Network topology failed: {response.status_code}")
        except Exception as e:
            logger.error(f"‚ùå Network topology error: {e}")
        
        # Test fuzzing endpoint
        logger.info("üß¨ Testing fuzzing endpoint...")
        try:
            response = await client.get(f"{API_BASE}/fuzzing/stats")
            if response.status_code == 200:
                stats = response.json()
                logger.info(f"‚úÖ Fuzzing stats: {stats['active_sessions']} active sessions")
            else:
                logger.error(f"‚ùå Fuzzing stats failed: {response.status_code}")
        except Exception as e:
            logger.error(f"‚ùå Fuzzing stats error: {e}")
        
        # Test sessions endpoint
        logger.info("üîê Testing sessions endpoint...")
        try:
            response = await client.get(f"{API_BASE}/sessions/")
            if response.status_code == 200:
                sessions = response.json()
                logger.info(f"‚úÖ Sessions endpoint: {len(sessions)} sessions found")
            else:
                logger.error(f"‚ùå Sessions endpoint failed: {response.status_code}")
        except Exception as e:
            logger.error(f"‚ùå Sessions endpoint error: {e}")
        
        # Test export endpoint
        logger.info("üì§ Testing export endpoint...")
        try:
            export_data = {
                "data_type": "attacks",
                "format": "json",
                "include_details": True
            }
            response = await client.post(f"{API_BASE}/export/", json=export_data)
            if response.status_code == 200:
                export = response.json()
                logger.info(f"‚úÖ Export created: {export['export_id']}")
            else:
                logger.error(f"‚ùå Export failed: {response.status_code}")
        except Exception as e:
            logger.error(f"‚ùå Export error: {e}")

async def test_websocket():
    """Test WebSocket connection"""
    logger.info("üîå Testing WebSocket connection...")
    try:
        import websockets
        uri = "ws://localhost:8000/ws"
        
        async with websockets.connect(uri) as websocket:
            # Send ping
            await websocket.send(json.dumps({"type": "ping"}))
            
            # Wait for pong
            response = await websocket.recv()
            message = json.loads(response)
            
            if message.get("type") == "pong":
                logger.info("‚úÖ WebSocket connection successful")
            else:
                logger.error(f"‚ùå Unexpected WebSocket response: {message}")
                
    except ImportError:
        logger.warning("‚ö†Ô∏è websockets library not installed, skipping WebSocket test")
    except Exception as e:
        logger.error(f"‚ùå WebSocket test failed: {e}")

async def main():
    """Main test function"""
    logger.info("üöÄ Starting DragonShard Visualization API Tests")
    logger.info("=" * 60)
    
    # Test API endpoints
    await test_api_endpoints()
    
    # Test WebSocket
    await test_websocket()
    
    logger.info("=" * 60)
    logger.info("‚úÖ DragonShard Visualization API tests completed!")

if __name__ == "__main__":
    asyncio.run(main()) 